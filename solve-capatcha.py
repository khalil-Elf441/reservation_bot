# Generated by Selenium IDE
import pytest
import time
import json
import time
import subprocess
import sounddevice as sd
import speech_recognition as sr
import scipy.io.wavfile as wavfile
import base64
import wave
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities


import pyaudio
from pydub import AudioSegment
import os
import speech_recognition as sr

# Define constants
CHUNK = 1024
FORMAT = pyaudio.paInt16
CHANNELS = 2
RATE = 44100
RECORD_SECONDS = 20
WAVE_OUTPUT_FILENAME = "recording.wav"
MP3_OUTPUT_FILENAME = "audio.mp3"

#from google.cloud import speech_v1 as speech
#from google.cloud import speech
#from google.cloud.speech_v1 import enums

class TestUntitled():
  def setup_method(self):
    self.driver = webdriver.Chrome()
    self.vars = {}
  
  def teardown_method(self):
    self.driver.quit()
  
  def test_untitled(self):
    # Test name: Untitled
    # Step # | name | target | value
    # 1 | open | https://tickets.rolandgarros.com/sign-in | 
    self.driver.get("https://tickets.rolandgarros.com/sign-in")
    # 2 | setWindowSize | 1034x566 | 
    self.driver.set_window_size(1034, 566)
    # 3 | selectFrame | index=0 | 
    self.driver.switch_to.frame(0)
    # 4 | click | id=captcha__audio__button | 
    self.driver.find_element(By.ID, "captcha__audio__button").click()
    # 5 | click | name=Lire | 
    self.driver.find_element(By.NAME, "Lire").click()
    # 6 | click | name=Lire | 
    #self.driver.find_element(By.NAME, "Lire").click()
    
    ####time.sleep(20)
    
    # Create an instance of PyAudio
    audio = pyaudio.PyAudio()

    # Open a stream to record audio
    stream = audio.open(format=FORMAT, channels=CHANNELS, rate=RATE, input=True, frames_per_buffer=CHUNK)

    # Record audio
    frames = []
    for i in range(0, int(RATE / CHUNK * RECORD_SECONDS)):
        data = stream.read(CHUNK)
        frames.append(data)

    # Stop the stream and terminate PyAudio
    stream.stop_stream()
    stream.close()
    audio.terminate()

    # Save the recorded audio as a WAV file
    wf = wave.open(WAVE_OUTPUT_FILENAME, 'wb')
    wf.setnchannels(CHANNELS)
    wf.setsampwidth(audio.get_sample_size(FORMAT))
    wf.setframerate(RATE)
    wf.writeframes(b''.join(frames))
    wf.close()

    time.sleep(3)


    # Convert the WAV file to MP3 format
    #audio = AudioSegment.from_wav(WAVE_OUTPUT_FILENAME)
    #audio.export(MP3_OUTPUT_FILENAME, format="mp3")
    
    # set the path of the wave file
    #wave_file = "C:\\Users\\mac\\Desktop\\booking-bot-project\\audio.wav"

    # create an AudioSegment object
    #audio = AudioSegment.from_wav(wave_file)

    # set the path of the output mp3 file
   # mp3_file = os.path.splitext(wave_file)[0] + ".mp3"

    # export the AudioSegment object as an mp3 file
    #audio.export(mp3_file, format="mp3")
    
    time.sleep(3)

    # Load the MP3 file and convert the audio to text
    r = sr.Recognizer()
    with sr.AudioFile(WAVE_OUTPUT_FILENAME) as source:
        audio_data = r.record(source)
        text = r.recognize_google(audio_data)
        print(text)

    # Delete the temporary WAV and MP3 files
    #os.remove(WAVE_OUTPUT_FILENAME)
    #os.remove(MP3_OUTPUT_FILENAME)
    
    # 7 | type | css=.audio-captcha-inputs:nth-child(1) | 1
    self.driver.find_element(By.CSS_SELECTOR, ".audio-captcha-inputs:nth-child(1)").send_keys("1")
    # 8 | type | css=.audio-captcha-inputs:nth-child(2) | 8
    self.driver.find_element(By.CSS_SELECTOR, ".audio-captcha-inputs:nth-child(2)").send_keys("8")
    # 9 | type | css=.audio-captcha-inputs:nth-child(3) | 7
    self.driver.find_element(By.CSS_SELECTOR, ".audio-captcha-inputs:nth-child(3)").send_keys("7")
    # 10 | type | css=.audio-captcha-inputs:nth-child(4) | 0
    self.driver.find_element(By.CSS_SELECTOR, ".audio-captcha-inputs:nth-child(4)").send_keys("0")
    # 11 | type | css=.audio-captcha-inputs:nth-child(5) | 8
    self.driver.find_element(By.CSS_SELECTOR, ".audio-captcha-inputs:nth-child(5)").send_keys("8")
    # 12 | type | css=.audio-captcha-inputs:nth-child(6) | 2
    self.driver.find_element(By.CSS_SELECTOR, ".audio-captcha-inputs:nth-child(6)").send_keys("2")
  
# Load CSV file and run Selenium script for each row
if __name__ == '__main__':
    script = TestUntitled()
    script.setup_method()
    script.test_untitled()